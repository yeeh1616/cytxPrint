using System;
using System.Collections.Generic;
using System.Text;
using Maticsoft.Common;
using Maticsoft.Common.model;
using System.Data.SQLite;
using System.Data;
using System.Collections;
using Maticsoft.Common.dbUtility;
using Maticsoft.BLL.serviceinterface;

namespace Maticsoft.BLL.serviceimpl
{
    public class SystemSettingsServiceImpl : BaseServiceImpl, ISystemSettingsService
    {

        #region 系统设置
        /// <summary>
        /// 查询系统配置对象(整个系统只有一条数据)
        /// </summary>
        /// <returns></returns>
        public sys_config getSysConfig()
        {
            List<sys_config> sclist = new List<sys_config>();
            try
            {
                DataSet ds = SQLiteHelper.getBLLInstance().Query("SELECT * FROM sys_config LIMIT 0,1;");
                if (null != ds && ds.Tables.Count > 0)
                {
                    sclist = (List<sys_config>)CollectionHelper.ConvertTo<sys_config>(ds);
                }

                return sclist[0];
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// 修改sys_config信息
        /// </summary>
        /// <returns></returns>
        public Boolean updateSysConfig(sys_config sc)
        {
            try
            {
                Dictionary<String, String> param = new Dictionary<string, string>() {
            { "data_keep_time", sc.data_keep_time.ToString() },
            { "is_auto_upgrade", sc.is_auto_upgrade.ToString() },
            { "is_auto_feedback", sc.is_auto_feedback.ToString() },
            { "soft_update_date", sc.soft_update_date.ToString() }
            };
                int r = SQLiteHelper.getBLLInstance().ExecuteSql(
                SQLBuilderUtil.dictionaryToSetAndWhereSQLString("sys_config", param, null));
                if (r == 0)
                {
                    throw new Exception("修改系统设置错误!");
                }

                return true;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// 修改服务器地址
        /// </summary>
        /// <param name="url"></param>
        /// <returns></returns>
        public Boolean updateServerURL(String url)
        {
            try
            {
                String sql = "UPDATE sys_config set server_url='" + url + "';";
                int r = SQLiteHelper.getBLLInstance().ExecuteSql(sql);
                if (r == 0)
                {
                    throw new Exception("修改系统设置错误!");
                }

                return true;
            }
            catch (Exception e)
            {
                throw e;
            }            
        }

        /// <summary>
        /// 修改音频文件地址
        /// </summary>
        /// <param name="audioFileFullname"></param>
        /// <returns></returns>
        public Boolean updateAudioFileFullname(String audioFileFullname)
        {
            try
            {
                String sql = "UPDATE sys_config set audio_file_fullname = '" + audioFileFullname + "';";
                int r = SQLiteHelper.getBLLInstance().ExecuteSql(sql);
                if (r == 0)
                {
                    throw new Exception("修改系统设置错误!");
                }

                return true;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// 修改音频文件地址2 未出票订单提示,有手工单和反馈单提示
        /// </summary>
        /// <param name="audioPath"></param>
        /// <param name="audioPath"></param>
        /// <returns></returns>
        public Boolean updateAudioFileFullname2(String audioPath)
        {
            try
            {
                String sql = String.Format("UPDATE sys_config set soft_version = '{0}'",audioPath);
                int r = SQLiteHelper.getBLLInstance().ExecuteSql(sql);
                if (r == 0)
                {
                    throw new Exception("修改系统设置错误!");
                }

                return true;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// 修改音频文件地址2 未出票订单提示,有手工单和反馈单提示
        /// </summary>
        /// <param name="HasOrder"></param>
        /// <returns></returns>
        public Boolean updateAudioFileFullname3(String audioPath)
        {
            try
            {
                String sql = String.Format("UPDATE sys_config set soft_version_msg = '{0}'", audioPath);
                int r = SQLiteHelper.getBLLInstance().ExecuteSql(sql);
                if (r == 0)
                {
                    throw new Exception("修改系统设置错误!");
                }

                return true;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// 修改更新时间
        /// </summary>
        /// <param name="url"></param>
        /// <returns></returns>
        public Boolean updateSdataUpdateDate(String sdataUpdateDate)
        {
            try
            {
                String sql = "UPDATE sys_config set sdata_update_date = '" + sdataUpdateDate + "';";
                int r = SQLiteHelper.getBLLInstance().ExecuteSql(sql);
                if (r == 0)
                {
                    throw new Exception("修改系统设置错误!");
                }

                return true;
            }
            catch (Exception e)
            {
                throw e;
            }            
        }

        /// <summary>
        /// 修改密码
        /// </summary>
        /// <param name="oldpass"></param>
        /// <param name="newpass"></param>
        /// <returns></returns>
        public Boolean updateSysConfigPass(String oldpass, String newpass)
        {
            try
            {
                sys_config sc = this.getSysConfig();
                string oldPWD = System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(oldpass, "MD5");
                if (!sc.sys_pass.Equals(oldPWD, StringComparison.CurrentCultureIgnoreCase))
                {
                    throw new Exception("旧密码输入错误!");
                }

                string newPWD = System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(newpass, "MD5");

                String sql = "UPDATE sys_config set sys_pass='" + newPWD + "';";
                int r = SQLiteHelper.getBLLInstance().ExecuteSql(sql);
                if (r == 0)
                {
                    throw new Exception("修改密码错误!");
                }
                return true;
            }
            catch (Exception e)
            {
                throw e;
            }
        }
        #endregion 系统设置

        #region 店铺彩机
        /// <summary>
        /// 查询所有的店铺彩机
        /// </summary>
        /// <returns></returns>
        public List<store_machine> getAllStoreMachine()
        {
            try
            {
                List<store_machine> sclist = (List<store_machine>)CollectionHelper.ConvertTo<store_machine>(SQLiteHelper.getBLLInstance().Query("SELECT * FROM store_machine;"));
                if (null == sclist || sclist.Count == 0)
                {
                    return new List<store_machine>();
                }
                return sclist;
            }
            catch (Exception e)
            {
                throw e;
            }            
        }

        /// <summary>
        /// 根据Id获取机器信息
        /// </summary>
        /// <param name="mId"></param>
        /// <returns></returns>
        public store_machine getStoreMachineById(String mId)
        {
            try
            {
                SQLiteParameter[] paras = new SQLiteParameter[]{
                new SQLiteParameter("@terminal_number",mId)};
                StringBuilder sbsql = new StringBuilder();
                sbsql.Append("SELECT * FROM store_machine where terminal_number = @terminal_number");
                DataTable dt = SQLiteHelper.getBLLInstance().ExecuteTable(sbsql.ToString(), paras);
                return (store_machine)(null == dt || null == dt.Rows ? null : Maticsoft.Common.Util.DataUtil.ToEntity(dt.Rows[0], typeof(store_machine)));
            }
            catch (Exception e)
            {
                throw e;
            }            
        }

        /// <summary>
        /// 插入一条店铺彩机数据
        /// </summary>
        /// <param name="machine"></param>
        /// <returns></returns>
        public Boolean insertStoreMachine(store_machine machine, List<machine_can_print_license> l)
        {
            try
            {
                ArrayList sqllist = new ArrayList();
                //插入店铺彩机
                sqllist.Add(SQLBuilderUtil.objToInsertSQLString("", machine));
                //插入彩机支持彩种
                foreach (machine_can_print_license li in l)
                {
                    sqllist.Add("INSERT INTO machine_can_print_license(terminal_number,machine_name,machine_code,type,license_id,license_name) VALUES('" + machine.terminal_number + "','" + machine.machine_name + "','" + machine.machine_code + "','" + machine.machine_type + "','" + li.license_id + "','" + li.license_name + "');");
                }

                SQLiteHelper.getBLLInstance().ExecuteSqlTran(sqllist);
                return true;
            }
            catch (Exception)
            {
                throw new Exception("插入店铺彩机操作出错!");
            }
        }

        /// <summary>
        /// 修改一条店铺彩机数据
        /// </summary>
        /// <param name="machine"></param>
        /// <returns></returns>
        public Boolean updateStoreMachine(store_machine machine, List<machine_can_print_license> l)
        {
            try
            {
                ArrayList sqllist = new ArrayList();
                Dictionary<String, String> param = new Dictionary<String, String>(){
                {"com_name",machine.com_name},
                {"com_baudrate",machine.com_baudrate.ToString()},
                {"com_databits",machine.com_databits.ToString()},
                {"com_stopbits",machine.com_stopbits},
                {"com_parity",machine.com_parity},
                //{"terminal_number",machine.terminal_number},
                {"is_feed_back",machine.is_feed_back.ToString()},
           {"speed_level",machine.speed_level.ToString()},
            {"big_ticket_amount",machine.big_ticket_amount.ToString()},
            {"big_ticket_pass",machine.big_ticket_pass},
           // {"is_auto_ticket",machine.is_auto_ticket.ToString()},
            {"is_continuous_ticket",machine.is_continuous_ticket.ToString()},
            {"is_compl_auto_stop",machine.is_compl_auto_stop.ToString()}
               };

                sqllist.Add("update store_machine " + SQLBuilderUtil.dictionaryToSetSQLString(param) + " WHERE terminal_number='" + machine.terminal_number + "';");

                //清除彩机对应的彩种
                sqllist.Add("delete from machine_can_print_license  where terminal_number='" + machine.terminal_number + "';");
                //加入彩机对应的彩种
                foreach (machine_can_print_license li in l)
                {
                    sqllist.Add("INSERT INTO machine_can_print_license VALUES('" + machine.terminal_number + "','" + li.license_id + "','" + li.license_name + "');");
                }

                SQLiteHelper.getBLLInstance().ExecuteSqlTran(sqllist);
                return true;
            }
            catch (Exception)
            {
                throw new Exception("修改店铺彩机操作出错!");
            }
        }

        /// <summary>
        /// 删除一条店铺彩机数据
        /// </summary>
        /// <param name="mId"></param>
        /// <returns></returns>
        public Boolean deleteStoreMachineById(String mId)
        {
            try
            {
                ArrayList sqllist = new ArrayList();
                //清除彩机对应的彩种
                sqllist.Add("delete from machine_can_print_license  where terminal_number='" + mId + "';");
                sqllist.Add("delete from store_machine  where terminal_number='" + mId + "'");
                SQLiteHelper.getBLLInstance().ExecuteSqlTran(sqllist);
                return true;
            }
            catch (Exception)
            {
                throw new Exception("修改店铺彩机操作出错!");
            }
        }


        /// <summary>
        /// 获取指定彩机所有的支持采种信息
        /// </summary>
        /// <returns></returns>
        public List<machine_supported_license> getMachineSupportedLicenseByTId(String tId)
        {
            try
            {
                StringBuilder sbsql = new StringBuilder();
                sbsql.Append("SELECT * FROM machine_supported_license where terminal_number='" + tId + "'");
                DataSet dt = SQLiteHelper.getBLLInstance().Query(sbsql.ToString(), null);
                if (dt.Tables[0].Rows.Count > 0)
                {
                    List<machine_supported_license> ltList = (List<machine_supported_license>)CollectionHelper.ConvertTo<machine_supported_license>(dt);
                    return ltList;
                }
                else
                {
                    return new List<machine_supported_license>();
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// 获取所有彩机支持的采种信息
        /// </summary>
        /// <returns></returns>
        public List<machine_can_print_license> getMachineCanPrintLicense()
        {
            try
            {
                StringBuilder sbsql = new StringBuilder();
                sbsql.Append("SELECT * FROM machine_can_print_license;");
                DataSet dt = SQLiteHelper.getBLLInstance().Query(sbsql.ToString(), null);
                if (dt.Tables[0].Rows.Count > 0)
                {
                    List<machine_can_print_license> ltList = (List<machine_can_print_license>)CollectionHelper.ConvertTo<machine_can_print_license>(dt);
                    return ltList;
                }
                else
                {
                    return new List<machine_can_print_license>();
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// 获取指定彩机所有的可打印采种信息
        /// </summary>
        /// <returns></returns>
        public List<machine_can_print_license> getMachineCanPrintLicenseByTId(String tId)
        {
            try
            {
                StringBuilder sbsql = new StringBuilder();
                sbsql.Append("SELECT * FROM machine_can_print_license where terminal_number='" + tId + "'");
                DataSet dt = SQLiteHelper.getBLLInstance().Query(sbsql.ToString(), null);
                if (dt.Tables[0].Rows.Count > 0)
                {
                    List<machine_can_print_license> ltList = (List<machine_can_print_license>)CollectionHelper.ConvertTo<machine_can_print_license>(dt);
                    return ltList;
                }
                else
                {
                    return new List<machine_can_print_license>();
                }
            }
            catch (Exception e)
            {
                throw e;
            }            
        }

        /// <summary>
        /// 删除机器彩种表中对应机器的数据
        /// </summary>
        /// <returns></returns>
        public Boolean delMachineLicenseBymId(String mId)
        {
            try
            {
                StringBuilder sbsql = new StringBuilder();
                sbsql.Append("delete from machine_can_print_license  where terminal_number='" + mId + "'");
                return (SQLiteHelper.getBLLInstance().ExecuteNonQuery(sbsql.ToString()) > 0);
            }
            catch (Exception)
            {
                throw new Exception("删除机器彩种表中对应机器的数据出错!");
            }
        }


        /// <summary>
        /// 向店铺彩机表中插入数据
        /// </summary>
        /// <param name="l"></param>
        /// <returns></returns>
        public Boolean insertMachineLicense(store_machine sm, List<machine_can_print_license> l)
        {            
            try
            {
                if (null == l || l.Count == 0)
                {
                    return false;
                }

                ArrayList sqllist = new ArrayList();
                foreach (machine_can_print_license li in l)
                {
                    sqllist.Add("INSERT INTO machine_can_print_license VALUES(" + sm.terminal_number + "," + sm.machine_name + "," + sm.machine_code + "," + sm.machine_type + "," + li.license_id + "," + li.license_name + ");");
                }
                SQLiteHelper.getBLLInstance().ExecuteSqlTran(sqllist);
                return true;
            }
            catch (Exception)
            {
                throw new Exception("向店铺彩机表中插入数据出错!");
            }
        }
        #endregion

        #region 速度等级、流程控制
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public List<speed_level_config> getAllSpeedLevelConfig()
        {
            try
            {
                List<speed_level_config> slclist = (List<speed_level_config>)CollectionHelper.ConvertTo<speed_level_config>(SQLiteHelper.getBLLInstance().Query("SELECT * FROM speed_level_config;"));
                if (null == slclist || slclist.Count == 0)
                {
                    return new List<speed_level_config>();
                }
                return slclist;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// 根据参数查询对应的流程控制记录
        /// </summary>
        /// <param name="machine_id"></param>
        /// <param name="license_id"></param>
        /// <param name="numbering"></param>
        /// <returns></returns>
        public List<speed_level_cmd> getSpeedLevelCmdByParams(Dictionary<String, String> param)
        {
            try
            {
                StringBuilder sbsql = new StringBuilder();
                sbsql.Append("SELECT * FROM speed_level_cmd");
                if (null != param && param.Count > 0)
                {
                    sbsql.Append(" where ");

                    List<string> keyslist = new List<string>(param.Keys);
                    for (int i = 0; i < keyslist.Count; i++)
                    {
                        sbsql.Append(keyslist[i] + "='" + param[keyslist[i]] + "'" + (i == keyslist.Count - 1 ? ";" : " and "));
                    }
                }
                DataSet dt = SQLiteHelper.getBLLInstance().Query(sbsql.ToString(), null);
                if (dt.Tables[0].Rows.Count > 0)
                {
                    List<speed_level_cmd> ltList = (List<speed_level_cmd>)CollectionHelper.ConvertTo<speed_level_cmd>(dt);
                    return ltList;
                }
                else
                {
                    return new List<speed_level_cmd>();
                }
            }
            catch (Exception)
            {
                throw new Exception("查询出错!");
            }
        }
        #endregion 速度等级、流程控制

        #region 错误操作选择
        /// <summary>
        /// 查询所有的错误处理方式
        /// </summary>
        /// <returns></returns>
        public List<error_handling> getAllErrorHandling()
        {
            try
            {
                StringBuilder sbsql = new StringBuilder();
                sbsql.Append("SELECT * FROM error_handling");
                DataSet dt = SQLiteHelper.getBLLInstance().Query(sbsql.ToString(), null);
                if (dt.Tables[0].Rows.Count > 0)
                {
                    List<error_handling> ltList = (List<error_handling>)CollectionHelper.ConvertTo<error_handling>(dt);
                    return ltList;
                }
                else
                {
                    return new List<error_handling>();
                }
            }
            catch (Exception)
            {
                throw new Exception("查询出错!");
            }
        }

        /// <summary>
        /// 修改错误处理方式
        /// </summary>
        /// <param name="errorhandling"></param>
        /// <returns></returns>
        public Boolean updateErrorHandling(error_handling errorhandling)
        {
            try
            {
                StringBuilder sbsql = new StringBuilder();
                sbsql.AppendFormat("UPDATE error_handling SET handle_code = '{0}' where error_code='{1}';", new String[] { errorhandling.handle_code.ToString(), errorhandling.error_code });
                return (SQLiteHelper.getBLLInstance().ExecuteSql(sbsql.ToString()) > 0);

            }
            catch (Exception)
            {
                throw new Exception("修改错误处理方式出错!");
            }
        }

        /// <summary>
        /// 修改最后登录名
        /// </summary>
        /// <param name="lastloginname"></param>
        /// <returns></returns>
        public bool updateLastLoginName(string lastloginname)
        {
            try
            {
                String sql = "UPDATE sys_config set last_login_name ='" + lastloginname + "';";
                int r = SQLiteHelper.getBLLInstance().ExecuteSql(sql);
                if (r == 0)
                {
                    throw new Exception("修改最后登录名错误!");
                }

                return true;
            }
            catch (Exception e)
            {
                throw e;
            }
        }
        #endregion 错误操作选择
    }
}
