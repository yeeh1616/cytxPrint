using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;

namespace Maticsoft.BLL.ScanPortImage.imageStructure.imageDataBlock
{
    public class SSQ_DataBlock : ImageDataBlock
    {
        /// <summary>
        /// （双色球蓝色球）数据块的起始位置
        /// </summary>
        protected Point startPointB;

        public static int DATA_BLOCK_HIGH = 15 * SPImageGlobal.BB_HIGH;

        public SSQ_DataBlock(int startx, int starty, int startBx, int startBy)
        {
            this.startPoint = new System.Drawing.Point(startx, starty);//红球
            this.startPointB = new System.Drawing.Point(startBx, starty);//蓝球(红球和蓝球纵坐标是一样的)
        }

        /// <summary>
        /// 江西双色球
        /// </summary>
        /// <param name="pointlist"></param>
        /// <param name="betCode"></param>
        public override void getPointArrayByData(List<System.Drawing.Point> pointlist, string betCode)
        {
            //betCode = @"01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33+01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33+01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33+01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33+01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33+01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16;";
            //betCode = "01,28,29,30,31,32,33+01,02;";


            int fsr = 1;//红球复式
            int fsb = 1;//蓝球复式

            string[] codes = betCode.Split(';');
            int len = codes.Length <= 5 ? codes.Length : 5;
            for (int i = 0; i < len; i++)
            {
                if (codes[i].Length > 0)
                {
                    string data = codes[i];

                    string red = null;// data.Split('+')[0];
                    string blue = null;// data.Split('+')[1];

                    if (data.Contains("+"))
                    {
                        red = data.Split('+')[0];
                        blue = data.Split('+')[1];
                    }
                    else
                    {
                        red = data.Split('|')[0];
                        blue = data.Split('|')[1];
                    }

                    //红球
                    string[] redNums = red.Split(',');
                    for (int j = 0; j < redNums.Length; j++)
                    {
                        int a = (int.Parse(redNums[j]) - 1) / 8;
                        int b = (int.Parse(redNums[j]) - 1) % 8;
                        //i表示票面上的第几注，共5注，每注5个坐标
                        pointlist.Add(new Point(ScanPortImageUtil.ssqRedCoordinateX[b], ScanPortImageUtil.ssqCoordinateY[a + i * 5]));
                    }

                    //蓝球
                    string[] blueNums = blue.Split(',');
                    for (int j = 0; j < blueNums.Length; j++)
                    {
                        int a = (int.Parse(blueNums[j]) - 1) / 4;
                        int b = (int.Parse(blueNums[j]) - 1) % 4;
                        //i表示票面上的第几注，共5注，每注5个坐标
                        pointlist.Add(new Point(ScanPortImageUtil.ssqBlueCoordinateX[b], ScanPortImageUtil.ssqCoordinateY[a + i * 5]));
                    }

                    fsr = Maticsoft.Common.MathHelper.combinations(6, redNums.Length);
                    fsb = blueNums.Length;
                }

                if (fsr > 1 || fsb > 1)
                {
                    pointlist.Add(new Point(ScanPortImageUtil.ssqMultipleCoordinateX, ScanPortImageUtil.ssqCoordinateY[i * 5]));
                }
            }


            //for (int i = 7; i <= 20; i++)
            //{
            //    pointlist.Add(new Point(this.startPoint.X - (i - 7) % 4 * 37 + 2, 140-4 + (i - 7) / 4 * 38));
            //}
            //for (int i = 2; i <= 16; i++)
            //{
            //    pointlist.Add(new Point(277 - (i - 2) % 4 * 37 + 2, 140 - 4 + (i - 2) / 4 * 38));
            //}
        }

        ///// <summary>
        ///// 普通双色球
        ///// </summary>
        ///// <param name="pointlist"></param>
        ///// <param name="betCode"></param>
        //public override void getPointArrayByData(List<System.Drawing.Point> pointlist, string betCode)
        //{
        //    //betCode = @"01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33+01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33+01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33+01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33+01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16;01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33+01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16;";
        //    //betCode = "01,28,29,30,31,32,33+01,02;";

        //    int fsr = 1;//红球复式
        //    int fsb = 1;//蓝球复式

        //    string[] codes = betCode.Split(';');

        //    for (int i = 0; i < codes.Length; i++)
        //    {
        //        if (codes[i].Length > 0)
        //        {
        //            string data = codes[i];

        //            string red = null;// data.Split('+')[0];
        //            string blue = null;// data.Split('+')[1];

        //            if (data.Contains("+"))
        //            {
        //                red = data.Split('+')[0];
        //                blue = data.Split('+')[1];
        //            }
        //            else
        //            {
        //                red = data.Split('|')[0];
        //                blue = data.Split('|')[1];
        //            }

        //            //红球
        //            string[] redNums = red.Split(',');
        //            for (int j = 0; j < redNums.Length; j++)
        //            {
        //                int a = (int.Parse(redNums[j]) - 1) / 6;
        //                int b = (int.Parse(redNums[j]) - 1) % 6;

        //                switch (i)
        //                {
        //                    case 0:
        //                        pointlist.Add(new Point(this.startPoint.X - a * 37, this.startPoint.Y + b * 38 + i * 228));
        //                        break;
        //                    case 1:
        //                        pointlist.Add(new Point(this.startPoint.X - a * 37, this.startPoint.Y + b * 38 + i * 228 + 1));
        //                        break;
        //                    case 2:
        //                        pointlist.Add(new Point(this.startPoint.X - a * 37, this.startPoint.Y + b * 38 + i * 228 + 2));
        //                        break;
        //                    case 3:
        //                        pointlist.Add(new Point(this.startPoint.X - a * 37, this.startPoint.Y + b * 38 + i * 228 + 3));
        //                        break;
        //                    case 4:
        //                        pointlist.Add(new Point(this.startPoint.X - a * 37, this.startPoint.Y + b * 38 + i * 228 + 4));
        //                        break;
        //                }
        //            }

        //            //蓝球
        //            string[] blueNums = blue.Split(',');
        //            for (int j = 0; j < blueNums.Length; j++)
        //            {
        //                int a = (int.Parse(blueNums[j]) - 1) / 6;
        //                int b = (int.Parse(blueNums[j]) - 1) % 6;

        //                switch (i)
        //                {
        //                    case 0:
        //                        pointlist.Add(new Point(this.startPointB.X - a * 37, this.startPointB.Y + b * 38 + i * 228));
        //                        break;
        //                    case 1:
        //                        pointlist.Add(new Point(this.startPointB.X - a * 37, this.startPointB.Y + b * 38 + i * 228 + 1));
        //                        break;
        //                    case 2:
        //                        pointlist.Add(new Point(this.startPointB.X - a * 37, this.startPointB.Y + b * 38 + i * 228 + 2));
        //                        break;
        //                    case 3:
        //                        pointlist.Add(new Point(this.startPointB.X - a * 37, this.startPointB.Y + b * 38 + i * 228 + 3));
        //                        break;
        //                    case 4:
        //                        pointlist.Add(new Point(this.startPointB.X - a * 37, this.startPointB.Y + b * 38 + i * 228 + 4));
        //                        break;
        //                }
        //            }

        //            fsr = Maticsoft.Common.MathHelper.combinations(6, redNums.Length);
        //            fsb = blueNums.Length;
        //        }
        //    }

        //    if (fsr > 1)
        //    {
        //        pointlist.Add(new Point(this.startPoint.X - (fsr - 7) % 4 * 37, 140 - 4 + (fsr - 7) / 4 * 38));
        //    }
        //    if (fsb > 1)
        //    {
        //        pointlist.Add(new Point(277 - (fsb - 2) % 4 * 37, 140 - 4 + (fsb - 2) / 4 * 38));
        //    }


        //    //for (int i = 7; i <= 20; i++)
        //    //{
        //    //    pointlist.Add(new Point(this.startPoint.X - (i - 7) % 4 * 37 + 2, 140-4 + (i - 7) / 4 * 38));
        //    //}
        //    //for (int i = 2; i <= 16; i++)
        //    //{
        //    //    pointlist.Add(new Point(277 - (i - 2) % 4 * 37 + 2, 140 - 4 + (i - 2) / 4 * 38));
        //    //}
        //}
    }
}
