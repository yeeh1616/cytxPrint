using Maticsoft.Common;
using Maticsoft.Common.Util;
using Maticsoft.Controller;
using System;
using System.Drawing;
using System.IO;
using System.Media;
using System.Windows.Forms;

namespace Demo
{
    public partial class UnitConfigAudio : UserControl
    {
        //当前选中的音频文件
        private RadioButton checkedRadioButton = new RadioButton();
        //保存后的音频文件
        private ItemAudio currentItemAudio = new ItemAudio();
  
        public UnitConfigAudio()
        {
            InitializeComponent();
        }
        bool formLoaded = false;
        private void UnitConfigAudio_Load(object sender, EventArgs e)
        {
            if (Global.sysconfig.soft_version.Equals("0"))
            {
                this.CheckHasOrderTone = false;
            }
            else
            {
                this.CheckHasOrderTone = true;
            }

            if (Global.sysconfig.soft_version_msg.Equals("0"))
            {
                this.CheckConfirmOrderTone = false;
            }
            else
            {
                this.CheckConfirmOrderTone = true;
            }

            formLoaded = true;

            this.errorControlsList.ControlList.BackColor = Color.White;
            this.errorControlsList.Gap = 10;

            try
            {
                //加载音频文件                
                FileInfo[] fsi = Global.AUDIO_FILES_BASEDIR.GetFiles();

                //加载无提示音选项
                ItemAudio itemAudioMute = new ItemAudio();
                itemAudioMute.RadioButton.Text = "无提示音";
                itemAudioMute.AudioFileFullName = "";
                this.errorControlsList.Add(itemAudioMute);
                //选中系统当前音频文件
                if (String.IsNullOrEmpty(Global.sysconfig.audio_file_fullname))
                {
                    itemAudioMute.RadioButton.Checked = true;
                    this.CheckedRadioButton = itemAudioMute.RadioButton;
                    //当前系统的音频文件的ItemAudio控件
                    this.CurrentItemAudio = itemAudioMute;
                }
                itemAudioMute.BtnSave.Click += this.btnSaveAudio_Click;
                itemAudioMute.RadioButton.CheckedChanged += radioButton_CheckedChanged;

                //加载有提示音选项
                for (int i = 0; i < fsi.Length; i++)
                {
                    try
                    {
                        if (SysUtil.isAudioFile(fsi[i].Extension))
                        {
                            ItemAudio itemAudio = new ItemAudio();
                            itemAudio.RadioButton.Text = fsi[i].Name.Replace(fsi[i].Extension, "");
                            itemAudio.AudioFileFullName = fsi[i].Name;
                            this.errorControlsList.Add(itemAudio);
                            //选中系统当前音频文件
                            if (Global.sysconfig.audio_file_fullname.Contains(itemAudio.RadioButton.Text))
                            {
                                itemAudio.RadioButton.Checked = true;
                                this.CheckedRadioButton = itemAudio.RadioButton;
                                //当前系统的音频文件的ItemAudio控件
                                this.CurrentItemAudio = itemAudio;
                            }

                            itemAudio.BtnSave.Click += this.btnSaveAudio_Click;
                            itemAudio.RadioButton.CheckedChanged += radioButton_CheckedChanged;
                        }
                    }
                    catch (Exception)
                    { }
                }
            }
            catch (Exception)
            {
            }
        }

        /// <summary>
        /// 选中音频事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void radioButton_CheckedChanged(object sender, EventArgs e)
        {
            if (String.IsNullOrEmpty(((ItemAudio)(((RadioButton)sender).Parent)).AudioFileFullName))
            {
                if (((RadioButton)sender).Checked)
                {
                    ((ItemAudio)(((RadioButton)sender).Parent)).BtnSave.Visible = true;
                    this.CheckedRadioButton.Checked = false;
                    this.CheckedRadioButton = sender as RadioButton;
                }
                else
                {
                    if (!((ItemAudio)(((RadioButton)sender).Parent)).Selected)
                    {
                        ((ItemAudio)(((RadioButton)sender).Parent)).BtnSave.Visible = false;
                    }
                }

                //修改保存按钮文字 保存后显示“选中”
                if ((((ItemAudio)(((RadioButton)sender).Parent)).AudioFileFullName).Equals(Global.sysconfig.audio_file_fullname))
                {
                    (((ItemAudio)(((RadioButton)sender).Parent)).BtnSave).Enabled = false;
                    ((ItemAudio)(((RadioButton)sender).Parent)).Selected = true;
                }
                else
                {
                    (((ItemAudio)(((RadioButton)sender).Parent)).BtnSave).Enabled = true;
                    ((ItemAudio)(((RadioButton)sender).Parent)).Selected = false;
                }
                return;
            }

            //从文件夹读取文件名列表
            FileSystemInfo[] fsi = Global.AUDIO_FILES_BASEDIR.GetFileSystemInfos();

            //选中该音频
            if (((RadioButton)sender).Checked)
            {
                ((ItemAudio)(((RadioButton)sender).Parent)).BtnSave.Visible = true;//显示保存按钮
                foreach (FileSystemInfo fileSystemInfo in fsi)
                {
                    if (fileSystemInfo.Name.Contains(((RadioButton)sender).Text))
                    {
                        this.CheckedRadioButton.Checked = false;
                        this.CheckedRadioButton = sender as RadioButton;
                    }
                }

                try
                {
                    //试听开始
                    if (!String.IsNullOrEmpty(((ItemAudio)(((RadioButton)sender).Parent)).AudioFileFullName))
                    {
                        System.Media.SoundPlayer sp = new SoundPlayer();
                        sp.SoundLocation = Global.AUDIO_FILES_BASEDIR.FullName + ((ItemAudio)(((RadioButton)sender).Parent)).AudioFileFullName;
                        sp.Play();
                    }
                }
                catch (Exception)
                {
                    throw;
                }
            }
            else
            {
                if (((ItemAudio)(((RadioButton)sender).Parent)).Selected)
                {
                    ((ItemAudio)(((RadioButton)sender).Parent)).Selected = false;
                }
            }

            //修改保存按钮文字 保存后显示“已保存”
            if ((((ItemAudio)(((RadioButton)sender).Parent)).AudioFileFullName).Equals(Global.sysconfig.audio_file_fullname))
            {
                (((ItemAudio)(((RadioButton)sender).Parent)).BtnSave).Enabled = false;
                ((ItemAudio)(((RadioButton)sender).Parent)).Selected = true;
            }
            else
            {
                (((ItemAudio)(((RadioButton)sender).Parent)).BtnSave).Enabled = true;
                ((ItemAudio)(((RadioButton)sender).Parent)).Selected = false;
            }
        }

        /// <summary>
        /// 保存音频事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSaveAudio_Click(object sender, EventArgs e)
        {
            if (new SystemSettingsController().updateAudioFileFullname(((ItemAudio)((Button)sender).Parent).AudioFileFullName))
            {
                this.CurrentItemAudio.BtnSave.Visible = false;
                Global.sysconfig.audio_file_fullname = ((ItemAudio)((Button)sender).Parent).AudioFileFullName;
                ((ItemAudio)((Button)sender).Parent).Selected = true;
                ((Button)sender).Enabled = false;
                this.CurrentItemAudio = ((Button)sender).Parent as ItemAudio;
            }
        }

        public ItemAudio CurrentItemAudio
        {
            get { return currentItemAudio; }
            set { currentItemAudio = value; }
        }

        public RadioButton CheckedRadioButton
        {
            get { return checkedRadioButton; }
            set { checkedRadioButton = value; }
        }

        bool checkHasOrderTone = false;
        bool checkConfirmOrderTone = false;
        
        private void picCheckHasOrderTone_Click(object sender, EventArgs e)
        {
            CheckHasOrderTone = !CheckHasOrderTone;
        }

        private void picCheckConfirmOrderTone_Click(object sender, EventArgs e)
        {
            CheckConfirmOrderTone = !CheckConfirmOrderTone;
        }

        public bool CheckHasOrderTone
        {
            get { return checkHasOrderTone; }
            set
            {
                //选中播放‘未出票订单提示音’
                checkHasOrderTone = value;
                if (checkHasOrderTone && formLoaded)
                {
                    System.Media.SoundPlayer sp = new SoundPlayer();
                    sp.SoundLocation = Global.AUDIO_FILES_BASEDIR.FullName + "/remind/No_OutTickit.WAV";
                    sp.Play();
                }

                if (checkHasOrderTone)
                {
                    this.picCheckHasOrderTone.BackgroundImage = global::Demo.Properties.Resources.checkFocused; 
                }
                else
                {
                    this.picCheckHasOrderTone.BackgroundImage = global::Demo.Properties.Resources.checkUnfocused;
                }
            }
        }
        public bool CheckConfirmOrderTone
        {
            get { return checkConfirmOrderTone; }
            set
            {
                //选中播放‘手工单和反馈单提示音’
                checkConfirmOrderTone = value;
                if (checkConfirmOrderTone && formLoaded)
                {
                    System.Media.SoundPlayer sp = new SoundPlayer();
                    sp.SoundLocation = Global.AUDIO_FILES_BASEDIR.FullName + "/remind/No_Confirm.WAV";
                    sp.Play();
                }

                if (checkConfirmOrderTone)
                {
                    this.picCheckConfirmOrderTone.BackgroundImage = global::Demo.Properties.Resources.checkFocused;
                }
                else
                {
                    this.picCheckConfirmOrderTone.BackgroundImage = global::Demo.Properties.Resources.checkUnfocused;
                }
            }
        }

        private void btnSave_MouseEnter(object sender, EventArgs e)
        {
            this.btnSave.BackgroundImage = global::Demo.Properties.Resources.btnSaveEnter;
        }

        private void btnSave_MouseLeave(object sender, EventArgs e)
        {
            this.btnSave.BackgroundImage = global::Demo.Properties.Resources.btnSave;
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            try
            {
                String HasOrder = this.CheckHasOrderTone ? "1" : "0";
                String ConfirmOrder = this.CheckConfirmOrderTone ? "1" : "0";
                SystemSettingsController systemSettingsController = new SystemSettingsController();
                if (systemSettingsController.updateAudioFileFullname2(HasOrder.ToString(), ConfirmOrder.ToString()))
                {
                    Global.sysconfig.soft_version = HasOrder;
                    Global.sysconfig.soft_version_msg = ConfirmOrder;
                }
            }
            catch (Exception)
            {
                System.Windows.Forms.MessageBox.Show("保存时发生异常。");
            }
        }
    }
}
