<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        R0lGODlhIwAjALMKALq6uvLy8sTExLOzs1RUVJeXl4GBgeHh4dbW1v39/f///wAAAAAAAAAAAAAAAAAA
        ACH/C05FVFNDQVBFMi4wAwEAAAAh/wtYTVAgRGF0YVhNUDw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0i
        VzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0
        YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNS1jMDE0IDc5LjE1MTQ4MSwgMjAxMy8wMy8xMy0x
        MjowOToxNSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5
        LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6
        eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFk
        b2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEu
        MC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIChX
        aW5kb3dzKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo0RDNCNTA4QTAwODMxMUU2OUU5OUM5NDky
        MkRDQjhBQiIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo0RDNCNTA4QjAwODMxMUU2OUU5OUM5NDky
        MkRDQjhBQiI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjREM0I1
        MDg4MDA4MzExRTY5RTk5Qzk0OTIyRENCOEFCIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjREM0I1
        MDg5MDA4MzExRTY5RTk5Qzk0OTIyRENCOEFCIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+
        IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+Af/+/fz7+vn49/b19PPy8fDv7u3s6+rp6Ofm
        5eTj4uHg397d3Nva2djX1tXU09LR0M/OzczLysnIx8bFxMPCwcC/vr28u7q5uLe2tbSzsrGwr66trKuq
        qainpqWko6KhoJ+enZybmpmYl5aVlJOSkZCPjo2Mi4qJiIeGhYSDgoGAf359fHt6eXh3dnV0c3JxcG9u
        bWxramloZ2ZlZGNiYWBfXl1cW1pZWFdWVVRTUlFQT05NTEtKSUhHRkVEQ0JBQD8+PTw7Ojk4NzY1NDMy
        MTAvLi0sKyopKCcmJSQjIiEgHx4dHBsaGRgXFhUUExIREA8ODQwLCgkIBwYFBAMCAQAAIfkEBQoACgAs
        AAAAACMAIwAABM4wyUmrvThbYYT+nyFWRwBaCFCJBoW8JxWIA8VOwYvEtrhLN4nuwJsARIVJ8KArUgoi
        VSI4dE4QBqhJREgwYZMvsYIoFDyTQdTCxOkQY4rAbP5h0Zk32EKnxzV6fyh9SSBiMXMFP4ZOB1JWkCB6
        LyZCAgCYmUWTe5mejyc6AlWWn6CRqGxWghmHJ64fepUYOW8xkxi4Gm0SXy+svnBXwE1hv2zHV8fFOrNO
        tXZgvpGkxQmkRdNCe9qbydd74Is81uIkrCABguWpyOjt8PEWEQAh+QQFCgAKACwCAAEAGAASAAAEW1DJ
        SatCNuuiOAWCFmpTYRhZoVaeJJyopbYZDGTCSrUATHaFEeUAE6Y6B4mp45McAABMSVfpJSUIKPR6KEh/
        WC0oAM48xWVN9pbWBL7tuBtBr8PLdrv8UBfU5REAIfkEBQoACgAsAwABAB0ADgAABGNQyUknKjXrLXFG
        3HSAVGFSQ0gBANkpnkLGHAsckxnTKmLnGh5HwJqdAjBZBak52JAYDOA1ARgMUwQCNyEOXF2K4Hq9abXM
        wDR0IV8t5wNX5TaAZef7xmpINbVzKgWBGXIqKhEAIfkEBQoACgAsCQABABkAEQAABFxQyakOoDhrJYDA
        3xYcGGBSRbohSHlO6soGk3nBRZgdbCvZEkFso+iRFMBDQbEkSozI1xDje7KOFESzuM0gsBrscuAkNrtl
        UDDtBNDY8HjGQK8bdHC7Xa6gE+wCEQAh+QQFCgAKACwQAAEAEgAYAAAEXVCJo6q9GAmsEOWSsFkCAIDh
        qBzmCYpqi6BwhbRoqgTt94qdAUAlKRRygMDFWCCijApoLho9TpfW68Wn7XazuaPYa7AUZt4ugHsFGAwD
        8vvtBCEKcwMYmXdpB3QKEQAh+QQFCgAKACwQAAEAEgAeAAAEclChoKq9WKLMK/oXIgjdt1njmZmWSJZg
        Nb4cq8ydF6chABycg+rg86k6giKA1lH+ci0jFDOZWq2FrFYCLSi8YG9um72aLxTzC3C2FI6dw+Ay5wAM
        QEm5UzD4LwBecAoHfgZMUHd/ZoZsVwiGZ4ZpVz4cEQAh+QQFCgAKACwRAAIAEQAfAAAEZlDJqU6gOCOU
        e9hduB0hdWxcKZ2gurYT60ooQpYsqtapyt6zA3BGxACOSIEKyQSUmgBlcUpEFApS1/Va3G47yp7kmpU4
        uRNlQWJoKy60UNtAQWfmk3UJT+SP9XcGBBodfi4CBmUqEQAh+QQFCgAKACwKAA8AGAASAAAEWlDJSatC
        OKNg+9Sa52VCdohoiiJqCgBsa730KU+BQAOCjBS2wy52MQA6BQviZVMUDIYk5VCoogRQg02qEHA92aOn
        2ptlKV+n1ZIto9KSM9pQcdfFkyT8RmxFAAAh+QQFCgAKACwEABMAHQAOAAAEY1DJSatV59JTtD0Ikl2A
        YQAeFa6Bar6puoZS8RoFkh7oNPO3XkZgQQAAxAlIVzIMKE8FqkBVBI6A0aeiU3S8YIXxGJt8KVWJ4Ngt
        h8FnHjlWbVPPinWvjMf7tB5taFFufHspEQAh+QQFCgAKACwCABAAGQARAAAEW1CYSY26OOtb6/6ZRBET
        aJ4oGgBpK7RfAYNDNhwoAhaFfvWbA2KY8bEwPJkCwFQIh4FMVMPDMI9Pn4n3WjYvQwTuI6hav2DiNnMt
        qjfm8xEzBnUxAsB9pgHUMxEAIfkEBQoACgAsAwAJABEAGAAABFQQGQOUvfiCOUX+CjcVCIgJomFmw1St
        LCzPdG3f+CoURc3zsN8PtuthAq8Pz3MRAAAlhNRyyByegIBCWgJhu1wQAnsJf7BViznz7Kqnn4P7PYfJ
        FREAIfkEBQoACgAsAgADAA4AHQAABGRQyakEoHgaUzLeBuJNAzhq23UKJtVR4OuKymEMFC4fI/LKI4FE
        eFIEVMVeYckESprNjG+pYCavGNoJAQBoMYeu2GMRCwJS8+SAQEvCXgpizpO4J4E5ou7R8zNsc0V6SYJJ
        AX8RADs=
</value>
  </data>
</root>